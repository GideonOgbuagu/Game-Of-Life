{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["operations","makeEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runGeneration","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","className","onClick","style","width","marginBottom","Math","random","display","gridTemplateColumns","margin","map","col","key","newGrid","height","backgroundColor","undefined","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAQMA,G,MAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,KAGDC,EAAgB,WAEpB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAjBF,GAiBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAjBT,KAiByB,kBAAM,MAG7C,OAAOH,GA6HMK,MAzHf,WAAgB,IAAD,EACWC,oBAAS,WAC/B,OAAOP,OAFI,mBACNQ,EADM,KACAC,EADA,OAMiBF,oBAAS,GAN1B,mBAMNG,EANM,KAMGC,EANH,KAQPC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAIhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBjB,GACP,IAF4B,eAEnBkB,GACP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EAjDf,IAiDiCC,GAAQ,GAAKA,EAhD9C,KAiDAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACI,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IAC1BF,EAASjB,GAAGkB,GAAK,IAbZA,EAAI,EAAGA,EA3CV,GA2CuBA,IAAM,EAA1BA,IADFlB,EAAI,EAAGA,EA3CR,GA2CqBA,IAAM,EAA1BA,SAqBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,oCACE,yBAAKa,UAAU,OACb,qDACA,6BAEE,4BACEC,QAAS,WACPlB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MAGJe,MAAO,CAAEC,MAAO,OAAQC,aAAc,SAErCtB,EAAU,OAAS,SAGtB,4BACEmB,QAAS,WAEP,IADA,IAAM5B,EAAO,GACJC,EAAI,EAAGA,EAzFd,GAyF2BA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MA1Fb,KA0F6B,kBACzB6B,KAAKC,SAAW,GAAM,EAAI,MAKhCzB,EAAQR,KAXZ,UAkBA,4BACE4B,QAAS,WACPpB,EAAQT,OAFZ,UAUF,yBACE8B,MAAO,CACLK,QAAS,OACTC,oBAAoB,UAAD,OApHf,GAoHe,WACnBC,OAAQ,aAGT7B,EAAK8B,KAAI,SAACrC,EAAMC,GAAP,OACRD,EAAKqC,KAAI,SAACC,EAAKnB,GAAN,OACP,yBACEoB,IAAG,UAAKtC,EAAL,YAAUkB,GACbS,QAAS,WACP,IAAMY,EAAUvB,YAAQV,GAAM,SAACW,GAC7BA,EAASjB,GAAGkB,GAAKZ,EAAKN,GAAGkB,GAAK,EAAI,KAEpCX,EAAQgC,IAEVX,MAAO,CACLC,MAAO,GACPW,OAAQ,GACRC,gBAAiBnC,EAAKN,GAAGkB,GAAK,YAASwB,EACvCC,OAAQ,+BC/HNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.899f3bc9.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport \"./App.css\";\n\nconst numRows = 50; // number of rows\nconst numCols = 50; // number of columns\n\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst makeEmptyGrid = () => { // make a sample or empty grid\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0)); //reduce all the value of iteration to zeros with Array.from([1,2,3], x => x + x) // [2, 4, 6]\n  }\n\n  return rows;\n};\n\n// game of life's component starts here\nfunction App() {\n  const [grid, setGrid] = useState(() => { //set a state called grid\n    return makeEmptyGrid();\n  });\n  // console.log(grid)\n\n  const [running, setRunning] = useState(false); // set a state called running\n\n  const runningRef = useRef(running); // \n  runningRef.current = running;\n\n  const runGeneration = useCallback(() => { // useCallback prevents multiple calls or returns of the callback function\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += g[newI][newJ];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0; // cell dies\n            } else if (g[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1; // cell lives\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runGeneration, 100); //\n  }, []);\n\n  return (\n    <>\n      <div className=\"App\">\n        <h1>Conway's Game of Life</h1>\n        <div>\n          {/* start / stop button is here */}\n          <button \n            onClick={() => {\n              setRunning(!running);\n              if (!running) {\n                runningRef.current = true;\n                runGeneration();\n              }\n            }}\n            style={{ width: \"70px\", marginBottom: \"20px\" }}\n          >\n            {running ? \"stop\" : \"start\"}\n          </button>\n          {/* random generation button is here */}\n          <button \n            onClick={() => {\n              const rows = [];\n              for (let i = 0; i < numRows; i++) {\n                rows.push(\n                  Array.from(Array(numCols), () =>\n                    Math.random() > 0.7 ? 1 : 0\n                  )\n                );\n              }\n\n              setGrid(rows);\n            }}\n          >\n            random\n          </button>\n          \n          {/* clear grid button is here */}\n          <button \n            onClick={() => {\n              setGrid(makeEmptyGrid());\n            }}\n          >\n            clear\n          </button>\n        </div>\n        {/* all buttons end here */}\n        {/* grid display starts */}\n        <div \n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${numCols}, 20px)`,\n            margin: \"0px auto\",\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, j) => (\n              <div\n                key={`${i},${j}`}\n                onClick={() => {\n                  const newGrid = produce(grid, (gridCopy) => {\n                    gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                  });\n                  setGrid(newGrid);\n                }}\n                style={{\n                  width: 20,\n                  height: 20,\n                  backgroundColor: grid[i][j] ? \"grey\" : undefined,\n                  border: \"solid 1px black\",\n                }}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}